#!/usr/bin/env node

/**
 * Module dependencies.
 */

 let app = require('../app');
 let debug = require('debug')('revomed-backend:server');
 const https = require('https');
 const fs = require("fs");


 /**
 * Start STUN/TURN SERVER
 */
 let Turn = require('node-turn');
 let TurnServer = new Turn({
  authMech: 'long-term',
  listeningIps: ['45.84.225.247'],
  credentials: {
    username: "password"
  }
 })
 TurnServer.start();


/**
 * Get port from environment and store in Express.
 */

 let port = normalizePort(process.env.PORT || '9001');
 app.set('port', port);

/**
 * Create HTTPS server.
 */

 /*let privateKey  = fs.readFileSync('/etc/letsencrypt/live/revomed.ru/privkey.pem', 'utf8');
 let certificate = fs.readFileSync('/etc/letsencrypt/live/revomed.ru/cert.pem', 'utf8');
 let ca = fs.readFileSync('/etc/letsencrypt/live/revomed.ru//fullchain.pem', 'utf8');*/
 let privateKey  = fs.readFileSync('/etc/letsencrypt/live/dev.amont.studio/privkey.pem', 'utf8');
 let certificate = fs.readFileSync('/etc/letsencrypt/live/dev.amont.studio/cert.pem', 'utf8');
 let ca = fs.readFileSync('/etc/letsencrypt/live/dev.amont.studio//fullchain.pem', 'utf8');
 let credentials = {key: privateKey, cert: certificate, ca: ca};

 let server = https.createServer(credentials, app);


/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

 // update server variable in config file
 let config = require('../config/config.js');
 config.updateServer(server);


 let io = require('socket.io')(server, {
  cors: {
    origin: config.config.frontend,
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: "origin, Content-Type, X-Requested-With, accept, Authorization",
    credentials: true
  }, 
  cookie: true,
});


global.io = io;


    /*SOCKET NOTIFICATIONS INIT*/
    require('../modules/video.js')(io);
    //require('../modules/consultation.js')(io);
    /* /SOCKET NOTIFICATIONS INIT*/

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

